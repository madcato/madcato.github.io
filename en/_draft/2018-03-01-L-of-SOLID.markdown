---
layout:     post
title:      "L of SOLID (3/5)"
date:       2018-02-28 23:00:00
author:     "Daniel Vela"
header-img: "img/post-bg-01.jpg"
locale:       en
lang-ref:   2018-03-01-L-of-SOLID
---

This is the third of five posts talking about the SOLID principles. This principles are a great guide to write good source code. Each post will talk about one of the principles:

* [**S** Single responsability principle]({% post_url en/2018-02-13-S-of-SOLID %})
* [**O** Open/Closed principle]({% post_url en/2018-02-20-O-of-SOLID %})
* [**L** Liskov substitution principle]({% post_url en/2018-03-01-L-of-SOLID %})
* [**I** Interface segregation principle]({% post_url en/2018-03-20-I-of-SOLID %})
* [**D** Dependency inversion principle]({% post_url en/2018-04-03-D-of-SOLID %})

## Liskov substitution principle

Any subtype of a class can be replaced with other subtype of the same class without affecting the correctnes of the software. 

### Sample

One sample could be a way to saparate the database from the rest of the app. Having a good sql interface, if the code works for a particular implementartion (like SQLite), also can work with the implementation for other (like MySQL). The way to do this is to create a base interface that has no method or property directly dependant of an specific implementation.

{% highlight C++ %}
class DatabaseInterface {
  QueryResult* selectQuery(QueryParams* params);
};

class SQLiteInterface: DatabaseInterface {
  QueryResult* selectQuery(QueryParams* params);
};

class MySQLInterface: DatabaseInterface {
  QueryResult* selectQuery(QueryParams* params);
};

class MSSQLServerInterface: DatabaseInterface {
  QueryResult* selectQuery(QueryParams* params);
};
{% endhighlight %}

It's tempting to use specific functionality of a concrete implementation, because it's special. But doing so makes the software less reusable.