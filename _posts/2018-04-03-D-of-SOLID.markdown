---
layout:     post
title:      "D of SOLID (5/5)"
date:       2018-04-02 23:00:00
author:     "Daniel Vela"
header-img: "img/post-bg-02.jpg"
---

This is the fifth of five posts talking about the SOLID principles. This principles are a great guide to write good source code. Each post will talk about one of the principles:

* [**S** Single responsability principle]({% post_url 2018-02-13-S-of-SOLID %})
* [**O** Open/Closed principle]({% post_url 2018-02-20-O-of-SOLID %})
* [**L** Liskov substitution principle]({% post_url 2018-03-01-L-of-SOLID %})
* [**I** Interface segregation principle]({% post_url 2018-03-20-I-of-SOLID %})
* [**D** Dependency inversion principle]({% post_url 2018-04-02-D-of-SOLID %})

## Dependency inversion principle

High-level modules and classes should not depend on low-level ones. Software elements of high-level like business objects should not depend on file systems, operating systems or user interfaces. 

### Sample

You have a Person class to store all data of the user and define some methods. In order to make this class not dependant on the database or the user interface

{% highlight Ruby %}
class ConcreteUI
end

class Person
  def initialize(name, age)
    @name
    @age
  end

  def createA
  # some code
  end
  
  def show
    ui = ConcreteUI.new
    ui.show("name #{person.name}")
    ui.show("age #{person.age}")
  end
end
{% endhighlight %}

It's better to make Person class independent from a ConcreteUI using protocols

{% highlight Ruby %}
class Person
  def initialize(name, age)
    @name
    @age
  end

  def createA
  # some code
  end
end

class UI
end

class ConcreteUI < UI
end

class PersonRepresentation
   def initialize(ui, person)
     @ui = ui
	 @person = person
   end
   
   def show
     @ui.show("name #{person.name}")
     @ui.show("age #{person.age}")
   end
end
{% endhighlight %}
