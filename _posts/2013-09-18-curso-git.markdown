---
layout:     post
title:      "Git course"
date:       2013-09-18 06:41:00
author:     "Daniel Vela"
header-img: "img/post-bg-06.jpg"
---

## 1. Introduction

Whit **git** the work repository is located in the root directory of the project. Specifically is located in a hide directory named *.git*.

In this directory all *commits*, versions and branches are stored.

**Git** principal characteristic is the posibility of working with different remote repositories. With **git** is easy to share code between programmers or send the final code to a production or preproduction repository without loosing track of the version and changes always.

### Installing git in macOS

Git is inlcuded with the last Xcode command line tools. Also it can be downloaded from [git-osx-installer for Mac OS X](http://code.google.com/p/git-osx-installer/)

#### Configure

	$git config --global user.name "Your name here"   
	$git config --global user.email "yourmail@here.com"   
	# optional, but recommended
	$git config --global merge.tool vimdiff    
	$git config --global core.editor vim   
	$git config --global color.ui true   

## 2. Basic commands

To initialize the version control of **git** use the command *init*.

	$ cd project
	$ git init
	
This will creata a subdirectory *.git* . In this directory all *commits* will be stored. But initially is all empty: the command *init* doesn't add the files to the repository. To do that use the command *add*

	$ git add .
	
Command *add* is recursive. Indicating a directory as parameter, it add that directory and all files and subdirectories recursively.

Also it can be used to add only one file.

	$ git add README
	
Although the *add* command doesn't add the file to the repo directly. wht it does is to add the file to a virtual zone of the repository called **stage**.
To add to the repository avery change or file, first it must be added to the **stage** those modified or created files. Once do it, you can add the changes to the repo with the command *commit*.

	$ git commit -m 'first commit'
	
Command *commit* requires a message. Without a text, appears a text editor to set a message text.

To know the state of a file use the command:

	$ git status
	
Is recommended to configure git with the flag ***color.ui*** set to ***true***

## 3. Branches

To create a branch:

	$ git branch new_branch
	
This will create a new developement branch copying the las made *commit*. To create a new brach is recommended to have save or undo every change in the current path. Otherwise, git will alert that the new branch cannot be created.

To change from one branch to anohter use the command *checkout*

	$ git checkout new_branch
	
To merge branches:

	$ git merge branch1
	
This will mix the current branch with the indicated as paran. Also creates a new *commit* in the current branch.

In case of conflicts, they should be resolved before create a new *commit*.

### Fastforward

There are cases in which, making a merge, happends a **fastforward**

When a change is made in a branch, the original branch -from where the current branch was created- it's possible that remains untouched. If so, when a merge is donem git realizes that doen't have to mix the code, it only has to change the HEAD pointer to the last *commit* of the original branch to the HEAD pointer of the new branch. This is called **fastforward**


The problem of this **fastforwards** is that the new branch dessapears without a trace. If we want to keep that branch or create a new commit in the original branch, you can user the parameter *--no-ff* .

	$ git merge --no-ff branch1 
	
This will avoid the **fastforward**.

## 4. Undoing changes

There are some ways to undo changes.

### Avoid to add a change to a *commit*

If we had added a file to the *stage* incorrectly, we can remove with the command **reset**. This way we avoid to add the change to the *commit*.

	$ git reset HEAD file

### Changing the las *commit*

If in the las *commit* you forgot to add the file, you can use the parameter **--ammend** to add a change to the las *commit* done.

	$ git commit -m 'first commit'
	$ git add file
	$ git commit --ammend
	

### Deleting changes in a local file

If we had changed incorrectly a file or we want to return to a previous version, we can use the commmand **checkout**. This command extracts from the repository 
Si hemos modificado por error un fichero o qqueremos volver a una versión previa, podemos usar el comando **checkout**. Este comando extrae del repositorio la versión que le indiquemos y sobreescribe el fichero que se encuentra en el directorio de trabajo. Por defecto este comando extrae la última versión de la rama actual.

	$ git checkout -- file
	
#### Eliminando el último *commit*
	
Si hemos realizado un *commit* erroneamente, podemos desahcerlo con el comando **reset**:

	$ git reset --hard HEAD^
	
Para eliminar varios *commits* se usar el parámetro *HEAD~3*


## 5. Resolviendo conflictos

Un conflicto se puede resolver de dos maneras:

### Editar el fichero con conflicto

Git marca los conflictos en los ficheros de texto usando los siguientes marcadores:

1. <<<<<<< HEAD
2. =======
3. \>\>\>\>\>\>\> branch

El texto que se encuentra entre los marcadores 1 y 2, es el texto de la rama activa. El texto que se encuentra entre los marcadores 2 y 3, es el texto de la rama que mezclamos. 

Una vez eliminados estos marcadores, debemos añadir el fichero al *stage* con el comando **add**. Una vez resueltos todos los conflictos, deberemos realizar el **commit**.

### Deshacer la mezcla de un fichero conflictivo

Si no queremos resolver los conflictos, podemos extrear una versión anterior del fichero para substituir a la actual conflictiva.

Si queremos matener la versión de la rama activa, usaremos el modificador **--ours**:

	$ git checkout --ours file

Si queremos matener la versión de la rama que es mezclada, usaremos el modificador **--theirs**:

	$ git checkout --theirs file



## 6. Repositorios remotos

Para inicializar un nuevo proyecto extrayendo los ficheros de un repositorio remoto, se debe usar el comando **clone**:

	$ git clone proyect_url
	
Este comando no solo copia los ficheros del proyecto remoto, además configura la rama actual asosiandola con la rama remota(*track*).

Cuando una rama local tiene asociada una o más ramas remotas, podemos compartir código con esas ramas. 

Con el comando **pull** podemos traernos los útimos cambios realizados en la rama remota. Con el comando **push** podemos enviar a la rama remota los últimos cambios realizados.

	$ git pull origin master
	$ git push origin master
	
Recibe dos parámetros. Primero en nombre del repositorio remoto a usar. Segundo, el nombre de la rama remota. 

Para saber que *remotes* tienes configurado una rama local usar el siguiente comando:
	
	$ git remote show origin
	
Para añadir un nuevo *remote* a un repositorio local se usa el comando **remote add**:
	
	$ git remote add remote_name remote_url
	

Una vez configurado el *remote*, se puede descargar todos sus ficheros y referencias con el comando **fetch**
	
	$ git fetch remote_name

El comando **fetch** es similar a realizar un **pull**. La diferencia reside en que el comando **pull** realiza un **merge** con los cambios locales.


### Crear repositorios en remoto

Se necesitan dos cosas para crear un repositorio remoto:

1. Un acceso remoto
2. Un repositorio *bare*

#### Acceso remoto

Se puede usar ssh, o un directorio compartido. 
Los protocolos que admite son:

- file://
- ssh://
- git://
- http://
- https://


#### Respositorio *bare*

Un repositorio se denomina *bare* cuando no tiene un directorio de trabajo asociado. Esto hace que se pueda usar como repositorio remoto para otros repositorios de trabajo.

Se puede crear un repositorio inicial bacío *bare* con el siguiente comando:

	$ git init --bare
	
También se puede crear un repositorio *bare* clonando un repositorio existente:

	$ git clone --bare url_rep new_rep


## Información de los *commits*

Para extraer información de los *commits* de la rama actual disponemos del comando **log**.

	$ git log
	
Un comando muy útil para ver gráficamente todas las ramas y sus *merges*, además de ver los mensajes asociados es el siguiente:

	$ git log --graph --decorate --pretty=oneline --abbrev-commit --all


## Sitios web que permiten el uso de git

Websites that host Git

* [GitHub](https://github.com/)
* [Assembla](https://www.assembla.com/home)
* [Beanstalk](http://beanstalkapp.com/)
* [Bitcucket](https://bitbucket.org/)
* [codebase](http://www.codebasehq.com/)
* [Unfuddle](https://unfuddle.com/)

## Como instalar git

[Instalar git en Linux, Mac y Windows](http://git-scm.com/book/en/Getting-Started-Installing-Git)

## Links

* [Git official site](http://git-scm.com)
* [Git book](http://git-scm.com/book)
* [Git reference](http://git-scm.com/docs)

## GUI

* [Sourcetree](http://www.sourcetreeapp.com)
* [Github for Mac](http://mac.github.com)

