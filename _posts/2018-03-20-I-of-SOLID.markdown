---
layout:     post
title:      "I of SOLID (4/5)"
date:       2018-03-19 23:00:00
author:     "Daniel Vela"
header-img: "img/post-bg-02.jpg"
---

This is the second of five posts talking about the SOLID principles. This principles are a great guide to write good source code. Each post will talk about one of the principles:

* [**S** Single responsability principle]({% post_url 2018-02-13-S-of-SOLID %})
* [**O** Open/Closed principle]({% post_url 2018-02-20-O-of-SOLID %})
* [**L** Liskov substitution principle]({% post_url 2018-03-01-L-of-SOLID %})
* [**I** Interface segregation principle]({% post_url 2018-03-20-I-of-SOLID %})
* **D** Dependency inversion principle

## Interface segregation principle

Its better to have many small interfaces, than a few big ones. Every code must only depend on the interfaces that directly needs and no more.

### Sample

Imagine a Plane class that has some functionalities at its service: like flight control and comunications. Its better to segregate those functionalities into two separte interfaces than have only one.

{% highlight Python %}
class Plane:
  def __init__(self):
    self.funcs = PlaneFucntions()

class PlaneFunctions:
  def communitation1:
   // code

  def communitation2:
    // code

  def control1
    // code
{% endhighlight %}

It's better to segreate complex interfaces into smaller ones:

{% highlight Python %}
class Plane:
  def __init__(self):
    self.controls = PlaneControls()
    self.comms = PlaneCommunications()

class PlaneControls:
  def control1
    // code

class PlaneCommunications:
  def communitation1:
   // code

  def communitation2:
    // code
{% endhighlight %}