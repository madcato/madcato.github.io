I"æ%<h1 id="how-to-decodeencode-github-api-event-feed">How to decode/encode Github API event feed</h1>

<ul>
  <li>Reference: <a href="https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types">Apple deocumentation</a></li>
  <li><a href="https://developer.github.com/v3/activity/events/types/">Github API: Events</a></li>
  <li><a href="https://api.github.com/events">Sample feed with github events</a></li>
</ul>

<h2 id="decoding-automatically-a-custom-object-from-json">Decoding automatically a custom object from json</h2>

<p>When decoding an object like:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"foo"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"payload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"word"</span><span class="p">:</span><span class="w"> </span><span class="s2">"hello"</span><span class="w">
        </span><span class="nl">"push_id"</span><span class="p">:</span><span class="w"> </span><span class="mi">3711282988</span><span class="p">,</span><span class="w">
        </span><span class="nl">"size"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>With a struct implementing <code class="highlighter-rouge">Codable</code> can be parsed easyly.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Payload</span><span class="p">:</span> <span class="kt">Codable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">word</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">push_id</span><span class="p">:</span> <span class="kt">Int</span>
	<span class="k">var</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">Int</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">Foo</span><span class="p">:</span> <span class="kt">Codable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">type</span><span class="p">:</span> <span class="kt">String</span>
	<span class="k">var</span> <span class="nv">payload</span><span class="p">:</span> <span class="kt">Payload</span>	
<span class="p">}</span>

<span class="k">let</span> <span class="nv">decoder</span> <span class="o">=</span> <span class="kt">JSONDecoder</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">product</span> <span class="o">=</span> <span class="k">try</span> <span class="n">decoder</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">Foo</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="n">json</span><span class="p">)</span>
</code></pre></div></div>

<p>But what happens when one of the inner properties of an object, includes a type that can be different.</p>

<h2 id="decoding-manualy--a-custom-object-from-json">Decoding manualy  a custom object from json</h2>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[{</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"foo"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"payload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"word"</span><span class="p">:</span><span class="w"> </span><span class="s2">"hello"</span><span class="w">
        </span><span class="nl">"push_id"</span><span class="p">:</span><span class="w"> </span><span class="mi">3711282988</span><span class="p">,</span><span class="w">
        </span><span class="nl">"size"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">},</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bar"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"payload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"size"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
		</span><span class="nl">"radious"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.5</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}]</span><span class="w">
</span></code></pre></div></div>

<p>In this case, the object cannot be parsed directly because the type of the payload object depends in the ‚Äútype‚Äù property.</p>

<p>To solve this, the object must be decoded manually, this way.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">FooPayload</span><span class="p">:</span> <span class="kt">Codable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">word</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">push_id</span><span class="p">:</span> <span class="kt">Int</span>
	<span class="k">var</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">Int</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">BarPayload</span><span class="p">:</span> <span class="kt">Codable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">Int</span>
	<span class="k">var</span> <span class="nv">radious</span><span class="p">:</span> <span class="kt">Double</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">Foo</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">type</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">payload</span><span class="p">:</span> <span class="kt">Payload</span><span class="p">?</span>
    <span class="kd">enum</span> <span class="kt">CodingKeys</span> <span class="p">:</span> <span class="kt">CodingKey</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">type</span><span class="p">,</span> <span class="n">payload</span>
    <span class="p">}</span>

    <span class="nf">init</span><span class="p">(</span><span class="n">from</span> <span class="nv">decoder</span><span class="p">:</span> <span class="kt">Decoder</span><span class="p">)</span> <span class="k">throws</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">values</span> <span class="o">=</span> <span class="k">try</span> <span class="n">decoder</span><span class="o">.</span><span class="nf">container</span><span class="p">(</span><span class="nv">keyedBy</span><span class="p">:</span> <span class="kt">CodingKeys</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
        <span class="n">type</span> <span class="o">=</span> <span class="k">try</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">type</span><span class="p">)</span>
        <span class="n">swith</span> <span class="n">type</span> <span class="p">{</span>
        <span class="k">case</span> <span class="s">"foo"</span><span class="p">:</span>
            <span class="n">payload</span> <span class="o">=</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">FooPayload</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">payload</span><span class="p">)</span>
        <span class="k">case</span> <span class="s">"bar"</span><span class="p">:</span>
            <span class="n">payload</span> <span class="o">=</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">BarPayload</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">payload</span><span class="p">)</span>
        <span class="k">default</span><span class="p">:</span>
            <span class="n">payload</span> <span class="o">=</span> <span class="kc">nil</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
:ET