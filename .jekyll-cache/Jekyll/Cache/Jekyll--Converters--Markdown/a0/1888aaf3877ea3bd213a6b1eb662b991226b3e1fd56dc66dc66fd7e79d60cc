I"3<h2 id="1-introduction">1. Introduction</h2>

<p>Whit <strong>git</strong> the work repository is located in the root directory of the project. Specifically is located in a hide directory named <em>.git</em>.</p>

<p>In this directory all <em>commits</em>, versions and branches are stored.</p>

<p><strong>Git</strong> principal characteristic is the posibility of working with different remote repositories. With <strong>git</strong> is easy to share code between programmers or send the final code to a production or preproduction repository without loosing track of the version and changes always.</p>

<h3 id="installing-git-in-macos">Installing git in macOS</h3>

<p>Git is inlcuded with the last Xcode command line tools. Also it can be downloaded from <a href="http://code.google.com/p/git-osx-installer/">git-osx-installer for Mac OS X</a></p>

<h4 id="configure">Configure</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$git config --global user.name "Your name here"   
$git config --global user.email "yourmail@here.com"   
# optional, but recommended
$git config --global merge.tool vimdiff    
$git config --global core.editor vim   
$git config --global color.ui true   
</code></pre></div></div>

<h2 id="2-basic-commands">2. Basic commands</h2>

<p>To initialize the version control of <strong>git</strong> use the command <em>init</em>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd project
$ git init
</code></pre></div></div>

<p>This will creata a subdirectory <em>.git</em> . In this directory all <em>commits</em> will be stored. But initially is all empty: the command <em>init</em> doesn’t add the files to the repository. To do that use the command <em>add</em></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add .
</code></pre></div></div>

<p>Command <em>add</em> is recursive. Indicating a directory as parameter, it add that directory and all files and subdirectories recursively.</p>

<p>Also it can be used to add only one file.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add README
</code></pre></div></div>

<p>Although the <em>add</em> command doesn’t add the file to the repo directly. wht it does is to add the file to a virtual zone of the repository called <strong>stage</strong>.
To add to the repository avery change or file, first it must be added to the <strong>stage</strong> those modified or created files. Once do it, you can add the changes to the repo with the command <em>commit</em>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit -m 'first commit'
</code></pre></div></div>

<p>Command <em>commit</em> requires a message. Without a text, appears a text editor to set a message text.</p>

<p>To know the state of a file use the command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git status
</code></pre></div></div>

<p>Is recommended to configure git with the flag <strong><em>color.ui</em></strong> set to <strong><em>true</em></strong></p>

<h2 id="3-branches">3. Branches</h2>

<p>To create a branch:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git branch new_branch
</code></pre></div></div>

<p>This will create a new developement branch copying the las made <em>commit</em>. To create a new brach is recommended to have save or undo every change in the current path. Otherwise, git will alert that the new branch cannot be created.</p>

<p>To change from one branch to anohter use the command <em>checkout</em></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout new_branch
</code></pre></div></div>

<p>To merge branches:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git merge branch1
</code></pre></div></div>

<p>This will mix the current branch with the indicated as paran. Also creates a new <em>commit</em> in the current branch.</p>

<p>In case of conflicts, they should be resolved before create a new <em>commit</em>.</p>

<h3 id="fastforward">Fastforward</h3>

<p>There are cases in which, making a merge, happends a <strong>fastforward</strong></p>

<p>When a change is made in a branch, the original branch -from where the current branch was created- it’s possible that remains untouched. If so, when a merge is donem git realizes that doen’t have to mix the code, it only has to change the HEAD pointer to the last <em>commit</em> of the original branch to the HEAD pointer of the new branch. This is called <strong>fastforward</strong></p>

<p>The problem of this <strong>fastforwards</strong> is that the new branch dessapears without a trace. If we want to keep that branch or create a new commit in the original branch, you can user the parameter <em>–no-ff</em> .</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git merge --no-ff branch1 
</code></pre></div></div>

<p>This will avoid the <strong>fastforward</strong>.</p>

<h2 id="4-undoing-changes">4. Undoing changes</h2>

<p>There are some ways to undo changes.</p>

<h3 id="avoid-to-add-a-change-to-a-commit">Avoid to add a change to a <em>commit</em></h3>

<p>If we had added a file to the <em>stage</em> incorrectly, we can remove with the command <strong>reset</strong>. This way we avoid to add the change to the <em>commit</em>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git reset HEAD file
</code></pre></div></div>

<h3 id="changing-the-las-commit">Changing the las <em>commit</em></h3>

<p>If in the las <em>commit</em> you forgot to add the file, you can use the parameter <strong>–ammend</strong> to add a change to the las <em>commit</em> done.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit -m 'first commit'
$ git add file
$ git commit --ammend
</code></pre></div></div>

<h3 id="deleting-changes-in-a-local-file">Deleting changes in a local file</h3>

<p>If we had changed incorrectly a file or we want to return to a previous version, we can use the commmand <strong>checkout</strong>. This command extracts from the repository the wanted version and overwites the files contained in the working directory. By default this command extracts the las version of the current branch.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout -- file
</code></pre></div></div>

<h4 id="deleting-the-las-commit">Deleting the las <em>commit</em></h4>

<p>If we had made an incorrect <em>commit</em>, we can undo it with <strong>reset</strong> command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git reset --hard HEAD^
</code></pre></div></div>

<p>In order to eliminate several <em>commits</em> use the parameter <em>HEAD~3</em></p>

<h2 id="5-resolving-conflicts">5. Resolving conflicts</h2>

<p>A conflict can be solved in two diffent ways:</p>

<h3 id="edit-the-file-wiht-the-conflict">Edit the file wiht the conflict</h3>

<p>Git marks conflicts en the files with a text using the followings marks:</p>

<ol>
  <li>«««&lt; HEAD</li>
  <li>=======</li>
  <li>&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch</li>
</ol>

<p>The text between the marks 1 and 2 is the text from the active branch. The text between the marks 2 and 3 is the one of the merged branch.</p>

<p>Once eliminated these marks, we must add the file to the <em>stage</em> with the command <strong>add</strong>. Once all the conflicts are resolved, we must make the <strong>commit</strong>.</p>

<h3 id="undo-the-merge-of-a-conflicted-file">Undo the merge of a conflicted file</h3>

<p>If we don’t want to resolve the conflicts, we can extract a new version of the previous file to substitue the conflicted one.</p>

<p>If we want to keep the current branch version, we use the modifier <strong>–ours</strong>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout --ours file
</code></pre></div></div>

<p>If we want to keep the merged branch version of the file, we use the modifier <strong>–theirs</strong>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout --theirs file
</code></pre></div></div>

<h2 id="6-remote-repositories">6. Remote repositories</h2>

<p>To initialize a new project downloading the files from a remote repository, you must use the command <strong>clone</strong>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone proyect_url
</code></pre></div></div>

<p>This command not only copies the files of the remote project, also it configures the current branch linking it with the remote brach (<em>track</em>).</p>

<p>When a local branch has one or more associated remote branches, we can share code with that branches.</p>

<p>With the command <strong>pull</strong> we can download the last changes done in the remote branch. With the command <strong>push</strong> we can send to the remote branch the last changes done.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git pull origin master
$ git push origin master
</code></pre></div></div>

<p>Need two parameters. First the name of the remote repository. Sencond, the name of the remote branch.</p>

<p>To know what <em>remotes</em> has configured a local branch use the following command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git remote show origin
</code></pre></div></div>

<p>To add a new <em>remote</em> to a local repository use the command <strong>remote add</strong>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git remote add remote_name remote_url
</code></pre></div></div>

<p>Once configured the <em>remote</em>, all files and references can be downloaded with the command <strong>fetch</strong>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git fetch remote_name
</code></pre></div></div>

<h3 id="create-a-remote-respository">Create a remote respository</h3>

<p>Two things are needed to create a remote repository:</p>

<ol>
  <li>A remote access</li>
  <li>A <em>bare</em> repository</li>
</ol>

<h4 id="remote-access">Remote access</h4>

<p>You can use ssh, or a shared directory.
The allowed protocols are:</p>

<ul>
  <li>file://</li>
  <li>ssh://</li>
  <li>git://</li>
  <li>http://</li>
  <li>https://</li>
</ul>

<h4 id="bare-repository"><em>bare</em> repository</h4>

<p>A repository is named <em>bare</em> when has not any associated directory. This allows to use like a remote repository in order to use by others working repositories.</p>

<p>You can create an empty initial <em>bare</em> repository with the following command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git init --bare
</code></pre></div></div>

<p>Also it can create a <em>bare</em> repository cloning an existing repository:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone --bare url_rep new_rep
</code></pre></div></div>

<h2 id="commits-information"><em>commits</em> information</h2>

<p>In order to extract information about the <em>commits</em> of the current branch we have the command <strong>log</strong>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git log
</code></pre></div></div>

<p>A command very useful to see graphically all the branches and <em>merges</em>, also to see the messages associated to the following:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git log --graph --decorate --pretty=oneline --abbrev-commit --all
</code></pre></div></div>

<h2 id="web-sites-that-allow-to-use-git">Web sites that allow to use git</h2>

<p>Websites that host Git</p>

<ul>
  <li><a href="https://github.com/">GitHub</a></li>
  <li><a href="https://www.assembla.com/home">Assembla</a></li>
  <li><a href="http://beanstalkapp.com/">Beanstalk</a></li>
  <li><a href="https://bitbucket.org/">Bitcucket</a></li>
  <li><a href="http://www.codebasehq.com/">codebase</a></li>
  <li><a href="https://unfuddle.com/">Unfuddle</a></li>
</ul>

<h2 id="how-to-install-git">How to install git</h2>

<p><a href="http://git-scm.com/book/en/Getting-Started-Installing-Git">Install git on Linux, Mac y Windows</a></p>

<h2 id="links">Links</h2>

<ul>
  <li><a href="http://git-scm.com">Git official site</a></li>
  <li><a href="http://git-scm.com/book">Git book</a></li>
  <li><a href="http://git-scm.com/docs">Git reference</a></li>
</ul>

<h2 id="gui">GUI</h2>

<ul>
  <li><a href="http://www.sourcetreeapp.com">Sourcetree</a></li>
  <li><a href="http://mac.github.com">Github for Mac</a></li>
</ul>

:ET