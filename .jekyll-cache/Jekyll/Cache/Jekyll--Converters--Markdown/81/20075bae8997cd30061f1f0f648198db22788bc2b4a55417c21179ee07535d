I"µ<p>This is the first of five posts talking about the SOLID principles. This principles are a great guide to write good source code. Each post will talk about one of the principles:</p>

<ul>
  <li><a href="/en/2018/02/13/S-of-SOLID/"><strong>S</strong> Single responsability principle</a></li>
  <li><a href="/en/2018/02/20/O-of-SOLID/"><strong>O</strong> Open/Closed principle</a></li>
  <li><a href="/en/2018/03/01/L-of-SOLID/"><strong>L</strong> Liskov substitution principle</a></li>
  <li><a href="/en/2018/03/20/I-of-SOLID/"><strong>I</strong> Interface segregation principle</a></li>
  <li><a href="/en/2018/04/03/D-of-SOLID/"><strong>D</strong> Dependency inversion principle</a></li>
</ul>

<h2 id="single-responsability-principle">Single responsability principle</h2>

<p>One class must have only one responsability. Meaning with responsability any type of task, duty or obligation. The reasons for doing this is to make classes more robust, because if it has only one thing to do, the probability to change this class is lower than if it has multiple responsabilities. If multiple duties are solved with one class, the danger of introducing a bug to a duty when changing another is high.</p>

<p>This principle also helps a lot in order to make testable code, because is easier to test small classes with a few functionalities than hudge classes with tons of functions.</p>

<h3 id="sample">Sample</h3>

<p>This <strong>User</strong> class has too many responsabilities:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span>
  <span class="kp">attr</span> <span class="ss">:name</span>
  <span class="kp">attr</span> <span class="ss">:login</span>
  <span class="kp">attr</span> <span class="ss">:website</span>
  <span class="kp">attr</span> <span class="ss">:phone</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">login</span><span class="p">,</span> <span class="n">website</span><span class="p">,</span> <span class="n">phone</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="vi">@login</span> <span class="o">=</span> <span class="n">login</span>
    <span class="vi">@website</span> <span class="o">=</span> <span class="n">website</span>
    <span class="vi">@phone</span> <span class="o">=</span> <span class="n">phone</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">printUser</span><span class="p">(</span><span class="n">printContext</span><span class="p">)</span>
   <span class="c1"># print code</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">showUser</span><span class="p">(</span><span class="n">screen</span><span class="p">)</span>
  	<span class="c1"># UI Code</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">saveUser</span><span class="p">(</span><span class="n">fileSystem</span><span class="p">)</span>
   <span class="c1"># file save</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Programming this way <strong>User</strong> class has too many dependencies. It depends on the file system, on the print system, and the UI. Itâ€™s better to distribute this behiviour through different classes.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span>
  <span class="kp">attr</span> <span class="ss">:name</span>
  <span class="kp">attr</span> <span class="ss">:login</span>
  <span class="kp">attr</span> <span class="ss">:website</span>
  <span class="kp">attr</span> <span class="ss">:phone</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">login</span><span class="p">,</span> <span class="n">website</span><span class="p">,</span> <span class="n">phone</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
	<span class="vi">@login</span> <span class="o">=</span> <span class="n">login</span>
	<span class="vi">@website</span> <span class="o">=</span> <span class="n">website</span>
	<span class="vi">@phone</span> <span class="o">=</span> <span class="n">phone</span>
  <span class="k">end</span>
  
<span class="k">class</span> <span class="nc">UserPrinter1</span>
  <span class="k">def</span> <span class="nf">print</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
   <span class="c1"># print code</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">UserUI</span>
  <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
  	<span class="c1"># UI Code</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">UserFS</span>
  <span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
   <span class="c1"># file save</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>This way the new classes are the ones how are dependant on the rest of the system and no the <strong>User</strong> class.</p>
:ET