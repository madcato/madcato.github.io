I"i<p>This is the third of five posts talking about the SOLID principles. This principles are a great guide to write good source code. Each post will talk about one of the principles:</p>

<ul>
  <li><a href="/en/2018/02/13/S-of-SOLID/"><strong>S</strong> Single responsability principle</a></li>
  <li><a href="/en/2018/02/20/O-of-SOLID/"><strong>O</strong> Open/Closed principle</a></li>
  <li><a href="/en/2018/03/01/L-of-SOLID/"><strong>L</strong> Liskov substitution principle</a></li>
  <li><a href="/en/2018/03/20/I-of-SOLID/"><strong>I</strong> Interface segregation principle</a></li>
  <li><a href="/en/2018/04/03/D-of-SOLID/"><strong>D</strong> Dependency inversion principle</a></li>
</ul>

<h2 id="liskov-substitution-principle">Liskov substitution principle</h2>

<p>Any subtype of a class can be replaced with other subtype of the same class without affecting the correctnes of the software.</p>

<h3 id="sample">Sample</h3>

<p>One sample could be a way to saparate the database from the rest of the app. Having a good sql interface, if the code works for a particular implementartion (like SQLite), also can work with the implementation for other (like MySQL). The way to do this is to create a base interface that has no method or property directly dependant of an specific implementation.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">class</span> <span class="nc">DatabaseInterface</span> <span class="p">{</span>
  <span class="n">QueryResult</span><span class="o">*</span> <span class="n">selectQuery</span><span class="p">(</span><span class="n">QueryParams</span><span class="o">*</span> <span class="n">params</span><span class="p">);</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">SQLiteInterface</span><span class="o">:</span> <span class="n">DatabaseInterface</span> <span class="p">{</span>
  <span class="n">QueryResult</span><span class="o">*</span> <span class="n">selectQuery</span><span class="p">(</span><span class="n">QueryParams</span><span class="o">*</span> <span class="n">params</span><span class="p">);</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">MySQLInterface</span><span class="o">:</span> <span class="n">DatabaseInterface</span> <span class="p">{</span>
  <span class="n">QueryResult</span><span class="o">*</span> <span class="n">selectQuery</span><span class="p">(</span><span class="n">QueryParams</span><span class="o">*</span> <span class="n">params</span><span class="p">);</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">MSSQLServerInterface</span><span class="o">:</span> <span class="n">DatabaseInterface</span> <span class="p">{</span>
  <span class="n">QueryResult</span><span class="o">*</span> <span class="n">selectQuery</span><span class="p">(</span><span class="n">QueryParams</span><span class="o">*</span> <span class="n">params</span><span class="p">);</span>
<span class="p">};</span></code></pre></figure>

<p>It’s tempting to use specific functionality of a concrete implementation, because it’s special. But doing so makes the software less reusable.</p>
:ET