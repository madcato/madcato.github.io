I"ƒ<h2 id="blocks">Blocks</h2>

<p>A block of code is an structure with this format:</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="o">^</span> <span class="o">&lt;</span><span class="n">return_type</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">parameters</span><span class="o">&gt;</span> <span class="p">{</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">}</span>   </code></pre></figure>

<p>like:</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="o">^</span><span class="n">BOOL</span><span class="p">(</span><span class="n">id</span> <span class="n">str</span><span class="p">){</span><span class="k">return</span> <span class="p">[</span><span class="n">str</span> <span class="nf">length</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">num</span><span class="p">;}</span>  
<span class="o">^</span><span class="p">{[</span><span class="n">local</span> <span class="nf">doSomething</span><span class="p">];}</span>  </code></pre></figure>

<p>This structures can be assigned or passed as a parameter or stacked.</p>

<h2 id="iterations">Iterations</h2>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="n">NSArray</span><span class="o">*</span> <span class="n">array</span><span class="p">;</span>  
<span class="k">for</span><span class="p">(</span><span class="n">id</span> <span class="n">e</span> <span class="k">in</span> <span class="n">array</span><span class="p">)</span> <span class="p">{...</span><span class="n">e</span><span class="p">...}</span>  
<span class="n">NSDictionary</span><span class="o">*</span> <span class="n">dictionary</span><span class="p">;</span>  
<span class="k">for</span><span class="p">(</span><span class="n">id</span> <span class="n">k</span> <span class="k">in</span> <span class="n">dictionary</span><span class="p">){...</span><span class="n">k</span><span class="p">...}</span>  
<span class="p">[</span><span class="n">array</span> <span class="nf">enumerateObjectsWithOptions</span><span class="p">:</span><span class="n">NSEnumerationReverse</span>   
                        <span class="nl">usingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">id</span> <span class="n">e</span><span class="p">,</span><span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span><span class="n">BOOL</span><span class="o">*</span> <span class="n">stop</span><span class="p">){...</span><span class="n">e</span><span class="p">...</span><span class="n">idx</span><span class="p">}];</span>  
<span class="p">[</span><span class="n">dictionary</span> <span class="nf">enumerateKeysAndObjectsUsingBlock</span><span class="p">:</span>  
         <span class="o">^</span><span class="p">(</span><span class="n">id</span> <span class="n">k</span><span class="p">,</span><span class="n">id</span> <span class="n">obj</span><span class="p">,</span><span class="n">BOOL</span><span class="o">*</span> <span class="n">stop</span><span class="p">){...</span><span class="n">k</span><span class="p">...</span><span class="n">obj</span><span class="p">;}]</span>  </code></pre></figure>

<h2 id="memory-management">Memory management</h2>

<p>When you have two objects that have a reference to each other, use this convention to avoid release locks: Downlinks member instance use retain. Uplinks member instance donâ€™t use retain.</p>

<p>This avoid memory locks like this one:</p>

<p><img src="http://localhost:4000/assets/tumblr_inline_mk05bvcs3R1qz4rgp.png" alt="obejcts never released" /></p>
:ET