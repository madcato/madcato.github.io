I"b<p>Include the following declarations in an existing class:</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="c1">// Declaration "YourClass.h"  </span>
<span class="k">@interface</span> <span class="nc">YourClass</span> <span class="p">{</span>  
<span class="p">}</span>  
<span class="k">+</span> <span class="p">(</span><span class="n">YourClass</span><span class="o">*</span><span class="p">)</span><span class="n">sharedInstance</span><span class="p">;</span>  
<span class="k">@end</span>  

<span class="c1">// Implementation "YourClass.m"  </span>
<span class="cp">#import "YourClass.h"  
</span>
<span class="k">static</span> <span class="n">YourClass</span> <span class="o">*</span><span class="n">sharedInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>  

<span class="k">@implementation</span> <span class="nc">YourClass</span>  
<span class="cp">#pragma mark -  
#pragma mark Singleton methods  
</span><span class="k">+</span> <span class="p">(</span><span class="n">YourClass</span><span class="o">*</span><span class="p">)</span><span class="n">sharedInstance</span> <span class="p">{</span>  
    <span class="k">@synchronized</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>  <span class="p">{</span>  
        <span class="k">if</span> <span class="p">(</span><span class="n">sharedInstance</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>  
            <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">YourClass</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">init</span><span class="p">];</span>  
            <span class="c1">// Some extra initialization can be done here  </span>
        <span class="p">}</span>  
    <span class="p">}</span>  
    <span class="k">return</span> <span class="n">sharedInstance</span><span class="p">;</span>  
<span class="p">}</span>  

<span class="k">+</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="nf">allocWithZone</span><span class="p">:(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span> <span class="p">{</span>  
    <span class="k">@synchronized</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>  
        <span class="k">if</span> <span class="p">(</span><span class="n">sharedInstance</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>  
            <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nf">allocWithZone</span><span class="p">:</span><span class="n">zone</span><span class="p">];</span>  
            <span class="k">return</span> <span class="n">sharedInstance</span><span class="p">;</span> <span class="c1">// assignment and return on first allocation  </span>
        <span class="p">}</span>  
    <span class="p">}</span>  
    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">// on subsequent allocation attempts return nil  </span>
<span class="p">}</span>  

<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="nf">copyWithZone</span><span class="p">:(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span> <span class="p">{</span>  
    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>  
<span class="p">}</span>  

<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="n">retain</span> <span class="p">{</span>  
    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>  
<span class="p">}</span>  

<span class="k">-</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">retainCount</span> <span class="p">{</span>  
    <span class="k">return</span> <span class="n">UINT_MAX</span><span class="p">;</span> <span class="c1">// denotes an object that cannot be released  </span>
<span class="p">}</span> 

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">release</span> <span class="p">{</span>  
    <span class="c1">//do nothing  </span>
<span class="p">}</span> 

<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="n">autorelease</span> <span class="p">{</span>  
    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>  
<span class="p">}</span> 

<span class="k">@end</span></code></pre></figure>
:ET