I"®><p>Inspired by <a href="https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.8t6ex2n88">this</a> post, I tried to develop an app using the MVVM architecture pattern.</p>

<p>This architecture pattern presents three different parts:</p>

<ul>
  <li>A View</li>
  <li>A Model</li>
  <li>A ViewModel</li>
</ul>

<p>The view is the responsible of interact with the UI. In iOS is de <em>UIView</em> and <em>UIViewController</em> classes. The <strong>Model</strong> represent the data to be managed. An the <strong>ViewModel</strong> becomes an interactor between <strong>Model</strong> and <strong>View</strong>. But the special thing is how thos interactor is managed by the <strong>View</strong>.</p>

<p>The <strong>ViewModel</strong> must declare a variable for each data that must be showed in the <strong>View</strong>. Then the <strong>View</strong> must declare a <em>observer</em> of the variable. This <em>observer</em> is invoked everytime the variable change, and then the <strong>View</strong> must present the new value to the user. Like the following code example:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">GreetingViewModel</span> <span class="p">:</span> <span class="kt">ViewModel</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">person</span><span class="p">:</span> <span class="kt">Person</span>
    <span class="k">var</span> <span class="nv">greeting</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="nf">greetingDidChange</span><span class="p">?(</span><span class="k">self</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">greetingDidChange</span><span class="p">:</span> <span class="p">((</span><span class="kt">GreetingViewModelProtocol</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())?</span>
    <span class="kd">required</span> <span class="nf">init</span><span class="p">(</span><span class="nv">person</span><span class="p">:</span> <span class="kt">Person</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">person</span> <span class="o">=</span> <span class="n">person</span>
    <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">showGreeting</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">greeting</span> <span class="o">=</span> <span class="s">"Hello"</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">person</span><span class="o">.</span><span class="n">firstName</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">person</span><span class="o">.</span><span class="n">lastName</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">GreetingViewController</span> <span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">viewModel</span><span class="p">:</span> <span class="kt">GreetingViewModelProtocol</span><span class="o">!</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">viewModel</span><span class="o">.</span><span class="n">greetingDidChange</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="k">unowned</span> <span class="k">self</span><span class="p">]</span> <span class="n">viewModel</span> <span class="k">in</span>
                <span class="k">self</span><span class="o">.</span><span class="n">greetingLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">viewModel</span><span class="o">.</span><span class="n">greeting</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Declaring a <strong>ViewModel</strong> this way we must design a concrete class for each <strong>View</strong>. This class must declare every data that the <strong>View</strong> requires. The <strong>ViewModel</strong> can preprocess every data before present it: like translate text, compound mixed strings(name, surname), change meassurament units, etc.</p>

<p><strong>ViewModel</strong> can be also responsible for controlling navigation of the <strong>Views</strong>.</p>

<p>The benefits of this design are:</p>

<ul>
  <li>Separate responsabilities. <strong>View</strong> can be the only responsible of managing the UI.</li>
  <li>Testability. Separating the <strong>Model</strong> from the <strong>View</strong> using a third class is the best way to test any of both without the other.</li>
</ul>

<p>I tried this achitecture in an app, and I really liked it.</p>

<h2 id="improvement">Improvement</h2>

<p>Instead of creating one <em>didChangeXXXXXX</em> method for every property in the <strong>ViewModel</strong>, create one method didChange as an map of mehtods and use an <em>enum</em> as the index of the map.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">enum</span> <span class="kt">GreetingViewField</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">greeting</span>
    <span class="k">case</span> <span class="n">thing</span>
    <span class="k">case</span> <span class="n">price</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">GreetingViewModelProtocol</span><span class="p">:</span> <span class="kd">class</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">greeting</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">thing</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">price</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">didChange</span><span class="p">:</span> <span class="p">[</span><span class="kt">GreetingViewField</span><span class="p">:((</span><span class="kt">GreetingViewModelProtocol</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())]</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">person</span><span class="p">:</span> <span class="kt">Person</span><span class="p">)</span>
    <span class="kd">func</span> <span class="nf">show</span><span class="p">(</span><span class="nv">field</span><span class="p">:</span> <span class="kt">GreetingViewField</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">GreetingViewModel</span><span class="p">:</span> <span class="kt">GreetingViewModelProtocol</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">person</span><span class="p">:</span> <span class="kt">Person</span>
    <span class="k">var</span> <span class="nv">greeting</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">didChange</span><span class="p">[</span><span class="kt">GreetingViewField</span><span class="o">.</span><span class="n">greeting</span><span class="p">]?(</span><span class="k">self</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">thing</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">didChange</span><span class="p">[</span><span class="kt">GreetingViewField</span><span class="o">.</span><span class="n">thing</span><span class="p">]?(</span><span class="k">self</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">price</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">didChange</span><span class="p">[</span><span class="kt">GreetingViewField</span><span class="o">.</span><span class="n">price</span><span class="p">]?(</span><span class="k">self</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">didChange</span><span class="p">:</span> <span class="p">[</span><span class="kt">GreetingViewField</span><span class="p">:((</span><span class="kt">GreetingViewModelProtocol</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())]</span> <span class="o">=</span> <span class="p">[:]</span>
    <span class="kd">required</span> <span class="nf">init</span><span class="p">(</span><span class="nv">person</span><span class="p">:</span> <span class="kt">Person</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">person</span> <span class="o">=</span> <span class="n">person</span>
    <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">show</span><span class="p">(</span><span class="nv">field</span><span class="p">:</span> <span class="kt">GreetingViewField</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="n">field</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">greeting</span><span class="p">:</span>
            <span class="k">self</span><span class="o">.</span><span class="n">greeting</span> <span class="o">=</span> <span class="s">"Hello"</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">person</span><span class="o">.</span><span class="n">firstName</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">person</span><span class="o">.</span><span class="n">lastName</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">thing</span><span class="p">:</span>
            <span class="k">self</span><span class="o">.</span><span class="n">thing</span> <span class="o">=</span> <span class="s">"Bye"</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">person</span><span class="o">.</span><span class="n">firstName</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">person</span><span class="o">.</span><span class="n">lastName</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">price</span><span class="p">:</span>
            <span class="k">self</span><span class="o">.</span><span class="n">price</span> <span class="o">=</span> <span class="s">"3.8"</span>
        <span class="p">}</span>
        
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="kt">GreetingViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">greetingLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">showGreetingButton</span><span class="p">:</span> <span class="kt">UIButton</span><span class="o">!</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
        <span class="k">self</span><span class="o">.</span><span class="n">showGreetingButton</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="kd">#selector(</span><span class="nf">GreetingViewController.showGreeting</span><span class="kd">)</span><span class="p">,</span> <span class="nv">forControlEvents</span><span class="p">:</span> <span class="o">.</span><span class="kt">TouchUpInside</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">didReceiveMemoryWarning</span><span class="p">()</span>
        <span class="c1">// Dispose of any resources that can be recreated.</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">viewModel</span><span class="p">:</span> <span class="kt">GreetingViewModelProtocol</span><span class="o">!</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">viewModel</span><span class="o">.</span><span class="n">didChange</span><span class="p">[</span><span class="o">.</span><span class="n">greeting</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="k">unowned</span> <span class="k">self</span><span class="p">]</span> <span class="n">viewModel</span> <span class="k">in</span>
                <span class="k">self</span><span class="o">.</span><span class="n">greetingLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">viewModel</span><span class="o">.</span><span class="n">greeting</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">showGreeting</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">viewModel</span><span class="o">.</span><span class="nf">show</span><span class="p">(</span><span class="o">.</span><span class="n">greeting</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
:ET