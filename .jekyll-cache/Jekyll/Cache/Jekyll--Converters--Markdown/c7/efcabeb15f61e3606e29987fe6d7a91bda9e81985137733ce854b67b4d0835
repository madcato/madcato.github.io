I"÷<p>This is the second of five posts talking about the SOLID principles. This principles are a great guide to write good source code. Each post will talk about one of the principles:</p>

<ul>
  <li><a href=""><strong>S</strong> Single responsability principle</a></li>
  <li><a href=""><strong>O</strong> Open/Closed principle</a></li>
  <li><a href=""><strong>L</strong> Liskov substitution principle</a></li>
  <li><a href=""><strong>I</strong> Interface segregation principle</a></li>
  <li><a href=""><strong>D</strong> Dependency inversion principle</a>
    <h2 id="openclosed-principle">Open/Closed principle</h2>
  </li>
</ul>

<p>Any sowftware entity, like the source code or classes, must be open to expand, and closed to change. You must include new funtionality to a class without changing the previous functions.</p>

<h3 id="ways-to-expand-functionality">Ways to expand functionality</h3>

<p>There is only one ways to expand the methods of one class: <strong>using inheritance</strong></p>

<p>There is two types of inheritance to expand code:</p>

<ol>
  <li>Use a specialized class to include new functionality or improve the previous one.</li>
  <li>The other way is to expond some beheviours of the code to abstract classes (like Swift protocols), to be implemented in the future</li>
</ol>

<h3 id="sample">Sample</h3>

<p>This shape class has two responsabilities, to be a circle and sometimes a square</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Shape</span>
  <span class="k">def</span> <span class="nf">makeCircle</span><span class="p">(</span><span class="n">radious</span><span class="p">)</span>
    <span class="vi">@type</span> <span class="o">=</span> <span class="ss">:circle</span>
    <span class="vi">@radious</span> <span class="o">=</span> <span class="n">radious</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">makeSquare</span><span class="p">(</span><span class="n">side</span><span class="p">)</span>
    <span class="vi">@type</span> <span class="o">=</span> <span class="ss">:square</span>
    <span class="vi">@side</span> <span class="o">=</span> <span class="n">side</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">area</span>
    <span class="k">if</span> <span class="vi">@type</span> <span class="o">==</span> <span class="ss">:circle</span>
      <span class="mi">2</span> <span class="o">*</span> <span class="no">M_PI</span> <span class="o">*</span> <span class="vi">@radious</span>
    <span class="k">elsif</span> <span class="vi">@type</span> <span class="o">==</span> <span class="ss">:square</span>
      <span class="n">side</span> <span class="o">*</span> <span class="n">side</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Itâ€™s better to define two classes, one for each responsability</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Shape</span>
  <span class="k">def</span> <span class="nf">area</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Circle</span> <span class="o">&lt;</span> <span class="no">Shape</span>
  <span class="k">def</span> <span class="nf">make</span><span class="p">(</span><span class="n">radious</span><span class="p">)</span>
    <span class="vi">@radious</span> <span class="o">=</span> <span class="n">radious</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">area</span>
    <span class="mi">2</span> <span class="o">*</span> <span class="no">M_PI</span> <span class="o">*</span> <span class="vi">@radious</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Square</span> <span class="o">&lt;</span> <span class="no">Shape</span>
  <span class="k">def</span> <span class="nf">make</span><span class="p">(</span><span class="n">side</span><span class="p">)</span>
    <span class="vi">@side</span> <span class="o">=</span> <span class="n">side</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">area</span>
    <span class="n">side</span> <span class="o">*</span> <span class="n">side</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Itâ€™s easier to mantain and to expand. This way it can be possible to expand the code with new shapes without changing the rest of the classes.</p>
:ET