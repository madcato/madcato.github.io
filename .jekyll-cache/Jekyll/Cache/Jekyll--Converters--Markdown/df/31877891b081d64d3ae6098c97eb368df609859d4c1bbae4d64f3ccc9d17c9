I"<p>This is the fifth of five posts talking about the SOLID principles. This principles are a great guide to write good source code. Each post will talk about one of the principles:</p>

<ul>
  <li><a href="/en/2018/02/13/S-of-SOLID/"><strong>S</strong> Single responsability principle</a></li>
  <li><a href="/en/2018/02/20/O-of-SOLID/"><strong>O</strong> Open/Closed principle</a></li>
  <li><a href="/en/2018/03/01/L-of-SOLID/"><strong>L</strong> Liskov substitution principle</a></li>
  <li><a href="/en/2018/03/20/I-of-SOLID/"><strong>I</strong> Interface segregation principle</a></li>
  <li><a href="/en/2018/04/03/D-of-SOLID/"><strong>D</strong> Dependency inversion principle</a></li>
</ul>

<h2 id="dependency-inversion-principle">Dependency inversion principle</h2>

<p>High-level modules and classes should not depend on low-level ones. Software elements of high-level like business objects should not depend on file systems, operating systems or user interfaces.</p>

<h3 id="sample">Sample</h3>

<p>You have a Person class to store all data of the user and define some methods. In order to make this class not dependant on the database or the user interface</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">ConcreteUI</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Person</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
    <span class="vi">@name</span>
    <span class="vi">@age</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">createA</span>
  <span class="c1"># some code</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">show</span>
    <span class="n">ui</span> <span class="o">=</span> <span class="no">ConcreteUI</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">ui</span><span class="p">.</span><span class="nf">show</span><span class="p">(</span><span class="s2">"name </span><span class="si">#{</span><span class="n">person</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
    <span class="n">ui</span><span class="p">.</span><span class="nf">show</span><span class="p">(</span><span class="s2">"age </span><span class="si">#{</span><span class="n">person</span><span class="p">.</span><span class="nf">age</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Itâ€™s better to make Person class independent from a ConcreteUI using protocols</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Person</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
    <span class="vi">@name</span>
    <span class="vi">@age</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">createA</span>
  <span class="c1"># some code</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">UI</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">ConcreteUI</span> <span class="o">&lt;</span> <span class="no">UI</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">PersonRepresentation</span>
   <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">ui</span><span class="p">,</span> <span class="n">person</span><span class="p">)</span>
     <span class="vi">@ui</span> <span class="o">=</span> <span class="n">ui</span>
	 <span class="vi">@person</span> <span class="o">=</span> <span class="n">person</span>
   <span class="k">end</span>
   
   <span class="k">def</span> <span class="nf">show</span>
     <span class="vi">@ui</span><span class="p">.</span><span class="nf">show</span><span class="p">(</span><span class="s2">"name </span><span class="si">#{</span><span class="n">person</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
     <span class="vi">@ui</span><span class="p">.</span><span class="nf">show</span><span class="p">(</span><span class="s2">"age </span><span class="si">#{</span><span class="n">person</span><span class="p">.</span><span class="nf">age</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
   <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

:ET