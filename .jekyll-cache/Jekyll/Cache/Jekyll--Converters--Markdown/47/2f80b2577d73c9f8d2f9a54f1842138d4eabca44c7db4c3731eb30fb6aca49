I"ä<p>If we use CoreData in a multithreaded applications, we must take count of the following. A <strong>NSManagedObject</strong> created in one thread, canâ€™t be used in another thread. Also a <strong>NSManagedObjectContext</strong> canâ€™t be used inter threads.</p>

<p>Two practices are recommended when programming with threads and CoreData:</p>

<ol>
  <li>Create a new <strong>NSManagedObjectContext</strong> for each thread. The object <strong>NSPersistentStore</strong> can be shared among thread safely.</li>
  <li>When is necessary sharing a <strong>NSManagedObject</strong> between threads, share its objectID property only. Then query that object with method:</li>
</ol>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc">		<span class="p">[</span><span class="n">managedObjectContext</span> <span class="nf">objectWithID</span><span class="p">:</span><span class="n">objectID</span><span class="p">];</span>
		</code></pre></figure>

<p>As apple say:</p>

<p><img src="http://localhost:4000/assets/tumblr_inline_mk0cy6QSYr1qz4rgp.png" alt="apple doc" /></p>

<p>PS: Remember that when using asynchronous request -either using blocks or delegates-, always is used a different thread for the response treatment.</p>
:ET