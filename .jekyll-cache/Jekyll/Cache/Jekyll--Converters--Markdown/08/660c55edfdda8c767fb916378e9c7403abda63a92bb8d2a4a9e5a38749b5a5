I"ö<h1 id="advance-ruby-duck-typing">Advance Ruby: duck typing</h1>

<p>Ruby is a dynamic typing language. This means that declaring a variable doesnâ€™t fix the type of it. The class of every variable in Ruby depends on the class of the object assigned to it. This class can be changed.</p>

<p>In Ruby the way to interact with objects isnâ€™t fixed by its class. The way to interact is choose by the developer. if an object need to respond to a method and it responds, then it can be called, it doesnâ€™t matter its class.</p>

<p>Duck typing is not a intrinsic mechanism of the Ruby language. It is a convention that developers choose to adopt.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'Hello World!'</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:to</span> <span class="n">str</span><span class="p">)</span>  <span class="c1"># =&gt; true  </span>
<span class="mi">42</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:to_str</span><span class="p">)</span>  <span class="c1"># =&gt; false  </span>
</code></pre></div></div>

<p>Remember that in Ruby there is no implicit type-checking.</p>

<p>This type of design convention leads to adopt another type of convention: the method name convention. Most of the Ruby methods are sort and very reusable names. This tendency help developers to design its classes in a reusable way.</p>

:ET